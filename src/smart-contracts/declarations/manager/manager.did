type definite_canister_settings = 
 record {
   compute_allocation: nat;
   controllers: opt vec principal;
   freezing_threshold: nat;
   memory_allocation: nat;
 };
type UserType = 
 variant {
   artist;
   fan;
 };
type UserId = principal;
type Timestamp = int;
type StatusResponse = 
 record {
   cycles: opt nat;
   heap_memory_size: opt nat;
   memory_size: opt nat;
   version: opt nat;
 };
type StatusRequest = 
 record {
   cycles: bool;
   heap_memory_size: bool;
   memory_size: bool;
   version: bool;
 };
type PrincipalInfo = 
 record {
   createdAt: Timestamp;
   userPrincipal: principal;
 };
type CanisterStatus = 
 record {
   cycles: nat;
   memory_size: nat;
   module_hash: opt blob;
   settings: definite_canister_settings;
   status: variant {
             running;
             stopped;
             stopping;
           };
 };
type CanisterId = principal;
service : {
  changeCanisterSize: (nat) -> () oneway;
  changeCycleAmount: (nat) -> () oneway;
  createProfileArtist: (PrincipalInfo) -> (opt principal);
  cyclesBalance: () -> (nat) query;
  deleteAccountCanister: (UserId, principal, UserType) -> (bool);
  getArtistAccountEntries: () -> (vec record {
                                        UserId;
                                        CanisterId;
                                      }) query;
  getAvailableMemoryCanister: (principal) -> (opt nat);
  getCanisterArtist: (principal) -> (opt principal) query;
  getCanisterStatus: () -> (CanisterStatus);
  getOwnerOfArtistCanister: (principal) -> (opt UserId) query;
  getStatus: (opt StatusRequest) -> (opt StatusResponse) query;
  getTotalArtistAccounts: () -> (nat) query;
  installCode: (principal, blob, blob) -> ();
  transferCyclesToAccountCanister: (principal, nat) -> ();
  transferCyclesToCanister: (principal, nat) -> ();
  transferCyclesToContentCanister: (principal, principal, nat) -> ();
  transferOwnershipArtist: (principal, principal) -> ();
}
