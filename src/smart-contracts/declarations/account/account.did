type definite_canister_settings = 
 record {
   compute_allocation: nat;
   controllers: opt vec principal;
   freezing_threshold: nat;
   memory_allocation: nat;
 };
type UserId__1 = principal;
type UserId = principal;
type Timestamp = int;
type StatusResponse = 
 record {
   cycles: opt nat;
   heap_memory_size: opt nat;
   memory_size: opt nat;
   version: opt nat;
 };
type StatusRequest = 
 record {
   cycles: bool;
   heap_memory_size: bool;
   memory_size: bool;
   version: bool;
 };
type ProfilePhoto = blob;
type FileExtension = 
 variant {
   aac;
   avi;
   gif;
   jpeg;
   jpg;
   mp3;
   mp4;
   png;
   svg;
   wav;
 };
type ContentInit = 
 record {
   chunkCount: nat;
   contentId: text;
   createdAt: Timestamp;
   description: text;
   extension: FileExtension;
   name: text;
   size: nat;
   tags: vec text;
   userId: UserId__1;
 };
type ContentId = text;
type CanisterStatus = 
 record {
   cycles: nat;
   memory_size: nat;
   module_hash: opt blob;
   settings: definite_canister_settings;
   status: variant {
             running;
             stopped;
             stopping;
           };
 };
type CanisterId = principal;
type ArtistBucket = 
 service {
   changeCanisterSize: (nat) -> () oneway;
   changeCycleAmount: (nat) -> () oneway;
   createContent: (ContentInit) -> (opt record {
                                          ContentId;
                                          principal;
                                        });
   createProfileInfo: (opt ArtistAccountData) -> (bool);
   deleteAccount: (principal) -> ();
   deleteContentCanister: (UserId, principal) -> (bool);
   getAllContentCanisters: () -> (vec CanisterId) query;
   getCanisterOfContent: (ContentId) -> (opt CanisterId) query;
   getCanisterStatus: () -> (CanisterStatus);
   getCurrentCyclesBalance: () -> (nat);
   getEntriesOfCanisterToContent: () ->
    (vec record {
           CanisterId;
           ContentId;
         }) query;
   getPrincipalThis: () -> (principal) query;
   getProfileInfo: (UserId) -> (opt ArtistAccountData__1) query;
   getStatus: (opt StatusRequest) -> (opt StatusResponse) query;
   removeContent: (ContentId, nat) -> ();
   transferFreezingThresholdCycles: () -> ();
   updateProfileInfo: (ArtistAccountData__1) -> (bool);
 };
type ArtistAccountData__1 = 
 record {
   createdAt: Timestamp;
   displayName: opt text;
   profilePhoto: opt ProfilePhoto;
   userName: opt text;
   userPrincipal: principal;
 };
type ArtistAccountData = 
 record {
   createdAt: Timestamp;
   displayName: opt text;
   profilePhoto: opt ProfilePhoto;
   userName: opt text;
   userPrincipal: principal;
 };
service : (opt ArtistAccountData, principal, principal) -> ArtistBucket
