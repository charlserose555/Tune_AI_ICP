type definite_canister_settings = 
 record {
   compute_allocation: nat;
   controllers: opt vec principal;
   freezing_threshold: nat;
   memory_allocation: nat;
 };
type UserId = principal;
type Timestamp = int;
type Thumbnail = 
 record {
   file: blob;
   fileType: text;
 };
type StatusResponse = 
 record {
   cycles: opt nat;
   heap_memory_size: opt nat;
   memory_size: opt nat;
   version: opt nat;
 };
type StatusRequest = 
 record {
   cycles: bool;
   heap_memory_size: bool;
   memory_size: bool;
   version: bool;
 };
type ContentInit = 
 record {
   chunkCount: nat;
   createdAt: Timestamp;
   duration: nat;
   fileType: text;
   size: nat;
   thumbnail: Thumbnail;
   title: text;
   userCanisterId: principal;
   userId: UserId;
 };
type ContentId = text;
type ContentData = 
 record {
   chunkCount: nat;
   contentCanisterId: principal;
   contentId: text;
   createdAt: Timestamp;
   duration: nat;
   fileType: text;
   playCount: nat;
   size: nat;
   thumbnail: Thumbnail;
   title: text;
   uploadedAt: Timestamp;
   userCanisterId: principal;
   userId: UserId;
 };
type CanisterStatus = 
 record {
   cycles: nat;
   memory_size: nat;
   module_hash: opt blob;
   settings: definite_canister_settings;
   status: variant {
             running;
             stopped;
             stopping;
           };
 };
type ArtistContentBucket = 
 service {
   changeCanisterSize: (nat) -> () oneway;
   changeCycleAmount: (nat) -> () oneway;
   checkCyclesBalance: () -> ();
   createContent: (ContentInit, nat) -> (opt record {
                                               ContentId;
                                               ContentData;
                                             });
   getAllContentInfo: (ContentId) ->
    (vec record {
           ContentId;
           ContentData;
         }) query;
   getCanisterStatus: () -> (CanisterStatus);
   getContentChunk: (ContentId, nat) -> (opt blob) query;
   getContentInfo: (ContentId) -> (opt ContentData) query;
   getCurrentCyclesBalance: () -> (nat) query;
   getPrincipalThis: () -> (principal) query;
   getStatus: (opt StatusRequest) -> (opt StatusResponse) query;
   putContentChunk: (ContentId, nat, blob) -> (nat);
   removeContent: (ContentId, nat) -> ();
   transferCyclesToThisCanister: () -> ();
   transferFreezingThresholdCycles: () -> ();
 };
service : (principal, principal, principal) -> ArtistContentBucket
